{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marti\\\\OneDrive\\\\Desktop\\\\fuely\\\\src\\\\components\\\\SearchBar.js\",\n  _s = $RefreshSig$();\n// src/components/SearchBar.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onLocationSelect,\n  placeholder,\n  defaultValue\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [query, setQuery] = useState(defaultValue || '');\n  const inputRef = useRef(null);\n\n  // Aktualizuj v prípade, že zmeníme defaultValue (napr. po resetAll)\n  useEffect(() => {\n    setQuery(defaultValue || '');\n  }, [defaultValue]);\n  useEffect(() => {\n    let intervalId;\n    let listener;\n    const initAutocomplete = () => {\n      if (!window.google || !window.google.maps || !window.google.maps.places || !inputRef.current) {\n        return false;\n      }\n\n      // Vytvoríme Autocomplete\n      const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n        types: ['(cities)']\n      });\n      autocomplete.setFields(['formatted_address', 'geometry', 'name']);\n\n      // Listener\n      listener = autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry && place.geometry.location) {\n          const lat = place.geometry.location.lat();\n          const lng = place.geometry.location.lng();\n          const locationData = {\n            address: place.formatted_address || place.name,\n            position: {\n              lat,\n              lng\n            }\n          };\n          setQuery(locationData.address);\n          onLocationSelect === null || onLocationSelect === void 0 ? void 0 : onLocationSelect(locationData);\n        } else {\n          onLocationSelect === null || onLocationSelect === void 0 ? void 0 : onLocationSelect({\n            address: place.formatted_address || place.name\n          });\n        }\n      });\n      return true;\n    };\n\n    // Skús init hneď\n    if (!initAutocomplete()) {\n      // Ak to nevyšlo, opakuj\n      intervalId = setInterval(() => {\n        if (initAutocomplete()) {\n          clearInterval(intervalId);\n        }\n      }, 200);\n    }\n\n    // Cleanup\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n      if (listener && window.google && window.google.maps && window.google.maps.event) {\n        window.google.maps.event.removeListener(listener);\n      }\n    };\n  }, [onLocationSelect]);\n\n  // Keď user píše do inputu ručne (nevyberie z Autocomplete)\n  const handleInputChange = e => {\n    setQuery(e.target.value);\n    // Môžeš dať onLocationSelect, ale zmysel to má až po Autocomplete\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '0.5rem 0'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      className: \"searchInput\",\n      type: \"text\",\n      value: query,\n      onChange: handleInputChange,\n      placeholder: placeholder || t('enter_location')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"GCXFboDZpamzWi40iLILFvKGDZY=\", false, function () {\n  return [useTranslation];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useTranslation","jsxDEV","_jsxDEV","SearchBar","onLocationSelect","placeholder","defaultValue","_s","t","query","setQuery","inputRef","intervalId","listener","initAutocomplete","window","google","maps","places","current","autocomplete","Autocomplete","types","setFields","addListener","place","getPlace","geometry","location","lat","lng","locationData","address","formatted_address","name","position","setInterval","clearInterval","event","removeListener","handleInputChange","e","target","value","style","margin","children","ref","className","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/marti/OneDrive/Desktop/fuely/src/components/SearchBar.js"],"sourcesContent":["// src/components/SearchBar.js\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst SearchBar = ({ onLocationSelect, placeholder, defaultValue }) => {\r\n  const { t } = useTranslation();\r\n  const [query, setQuery] = useState(defaultValue || '');\r\n  const inputRef = useRef(null);\r\n\r\n  // Aktualizuj v prípade, že zmeníme defaultValue (napr. po resetAll)\r\n  useEffect(() => {\r\n    setQuery(defaultValue || '');\r\n  }, [defaultValue]);\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n    let listener;\r\n\r\n    const initAutocomplete = () => {\r\n      if (\r\n        !window.google ||\r\n        !window.google.maps ||\r\n        !window.google.maps.places ||\r\n        !inputRef.current\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      // Vytvoríme Autocomplete\r\n      const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\r\n        types: ['(cities)']\r\n      });\r\n      autocomplete.setFields(['formatted_address', 'geometry', 'name']);\r\n\r\n      // Listener\r\n      listener = autocomplete.addListener('place_changed', () => {\r\n        const place = autocomplete.getPlace();\r\n        if (place.geometry && place.geometry.location) {\r\n          const lat = place.geometry.location.lat();\r\n          const lng = place.geometry.location.lng();\r\n          const locationData = {\r\n            address: place.formatted_address || place.name,\r\n            position: { lat, lng }\r\n          };\r\n          setQuery(locationData.address);\r\n          onLocationSelect?.(locationData);\r\n        } else {\r\n          onLocationSelect?.({ address: place.formatted_address || place.name });\r\n        }\r\n      });\r\n      return true;\r\n    };\r\n\r\n    // Skús init hneď\r\n    if (!initAutocomplete()) {\r\n      // Ak to nevyšlo, opakuj\r\n      intervalId = setInterval(() => {\r\n        if (initAutocomplete()) {\r\n          clearInterval(intervalId);\r\n        }\r\n      }, 200);\r\n    }\r\n\r\n    // Cleanup\r\n    return () => {\r\n      if (intervalId) clearInterval(intervalId);\r\n      if (listener && window.google && window.google.maps && window.google.maps.event) {\r\n        window.google.maps.event.removeListener(listener);\r\n      }\r\n    };\r\n  }, [onLocationSelect]);\r\n\r\n  // Keď user píše do inputu ručne (nevyberie z Autocomplete)\r\n  const handleInputChange = (e) => {\r\n    setQuery(e.target.value);\r\n    // Môžeš dať onLocationSelect, ale zmysel to má až po Autocomplete\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: '0.5rem 0' }}>\r\n      <input\r\n        ref={inputRef}\r\n        className=\"searchInput\"\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={handleInputChange}\r\n        placeholder={placeholder || t('enter_location')}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}